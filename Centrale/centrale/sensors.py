from serial import Serial, SerialException
from serial.tools import list_ports
from datetime import datetime
from linegraph import Graph
import settings_editor
import threading

class Sensor():
    def __init__(self, my_serial, device_type, id, existing_sensors):
        self.serial = my_serial
        self.port = my_serial.port
        self.type = device_type
        self.id = id
        self.giveName(existing_sensors)
        self.current_log_file_date = datetime.now().strftime("%d-%m-%Y")
        self.logFilePath = "../logs/" + self.name + "_" + self.current_log_file_date + ".txt"
        try:
            f = open(self.logFilePath)
            f.close()
        except FileNotFoundError:
            self.createLogFile()
        self.alive = True
        self.thread = threading.Thread(target=self.log, name=self.name + "Thread")
        self.thread.start()
        self.current_value = None

    def giveName(self, existing_sensors):
        # Geeft een naam aan de sensor op basis van wat in settings.json staat opgeslagen
        name = ""
        naming_dict = {
            "_TEMP": "Temperatuursensor", 
            "_LGHT": "Lichtsensor"
            } 
        settings = settings_editor.readSettings()
        try:
            name = settings["sensor_name"][self.id]["name"]
        except KeyError:
            if self.type in naming_dict.keys():
                sensor_number = len([sensor["name"] for sensor in settings["sensor_name"].values() if sensor["type"] == self.type]) + 1
                name += naming_dict[self.type] + str(sensor_number)
                settings["sensor_name"][self.id] = {}
                settings["sensor_name"][self.id]["name"] = name
                settings["sensor_name"][self.id]["type"] = self.type
                settings_editor.writeSettings(settings)
        self.name = name

    def createLogFile(self):
        # Maakt een nieuwe log file van 
        self.current_log_file_date = datetime.now().strftime("%d-%m-%Y")
        self.logFilePath = "../logs/" + self.name + "_" + self.current_log_file_date + ".txt"
        # self.logFilePath = "../logs/" + self.name + "_" + datetime.now().strftime("%d-%m-%Y") + ".txt"
        log_file = open(self.logFilePath, "w+")
        log_file.write("# WARNING: DO NOT EDIT THIS FILE!\n")
        log_file.write("# File created: " + datetime.now().strftime("%d-%m-%Y %H:%M:%S") + "\n")
        log_file.write("# Log file for " + self.name + "\n")
        log_file.write("# Time,Value\n")
        log_file.close()
            
    def log(self):
        # Logged waard die sensor stuurt in log file 
        while self.alive:
            try: 
                response = self.serial.readline()
                response = response.decode("utf-8")
                sensor_type, value = response.split(":")
                value = float(value)
                if sensor_type == self.type:
                    self.current_value = value
                    if self.current_log_file_date != datetime.now().strftime("%d-%m-%Y"):
                         self.createLogFile()
                    with open (self.logFilePath, "a") as f:
                        f.write(datetime.now().strftime("%H:%M:%S") + "," + str(value) + '\n')
            except:
                pass
        
    def disconnect(self):
        # Sluit serial veilig af en stopt log thread
        self.alive = False
        with open (self.logFilePath, "a") as f:
            f.write("<<break>>" + '\n')
        self.serial.close()
