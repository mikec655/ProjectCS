from serial import Serial, SerialException
from serial.tools import list_ports
from datetime import datetime
from linegraph import Graph
import settings_editor
import threading

class Sensor():
    def __init__(self, my_serial, device_type, id, existing_sensors):
        self.serial = my_serial
        self.port = my_serial.port
        self.type = device_type
        self.id = id
        self.name = self.get_name(existing_sensors)
        self.current_log_file_date = datetime.now().strftime("%d-%m-%Y")
        self.log_file_path = "Centrale/logs/" + self.name + "_" + self.current_log_file_date + ".txt"
        self.alive = True
        self.thread = threading.Thread(target=self.log, name=self.name + "Thread")
        self.thread.start()

    def get_name(self, existing_sensors):
        sensor_name = ""
        naming_dict = {
            "_TEMP": "Temperatuursensor", 
            "_LGHT": "Lichtsensor"
            } 
        settings = settings_editor.readSettings()
        try:
            sensor_name = settings["sensor_name"][self.id]["name"]
        except KeyError:
            if self.type in naming_dict.keys():
                sensor_number = len([sensor["name"] for sensor in settings["sensor_name"].values() if sensor["type"] == self.type]) + 1
                sensor_name += naming_dict[self.type] + str(sensor_number)
                settings["sensor_name"][self.id] = {}
                settings["sensor_name"][self.id]["name"] = sensor_name
                settings["sensor_name"][self.id]["type"] = self.type
                settings_editor.writeSettings(settings)
        return sensor_name

    def create_log_file(self):
        self.current_log_file_date = datetime.now().strftime("%d-%m-%Y")
        self.log_file_path = "Centrale/logs/" + self.name + "_" + self.current_log_file_date + ".txt"
        # self.log_file_path = "../logs/" + self.name + "_" + datetime.now().strftime("%d-%m-%Y") + ".txt"
        log_file = open(self.log_file_path, "w+")
        log_file.write("# WARNING: DO NOT EDIT THIS FILE!\n")
        log_file.write("# File created: " + datetime.now().strftime("%d-%m-%Y %H:%M:%S") + "\n")
        log_file.write("# Log file for " + self.name + "\n")
        log_file.write("# Time,Value\n")
        log_file.close()
            
    def log(self):
        while self.alive:
            try: 
                response = self.serial.readline()
                response = response.decode("utf-8")
                sensor_type, value = response.split(":")
                value = float(value)
                if sensor_type == self.type:
                    if self.current_log_file_date != datetime.now().strftime("%d-%m-%Y"):
                         self.create_log_file()
                    try:
                        f = open(self.log_file_path)
                        f.close()
                    except FileNotFoundError:
                        self.create_log_file()
                    with open (self.log_file_path, "a") as f:
                        f.write(datetime.now().strftime("%H:%M:%S") + "," + str(value) + '\n')
            except:
                pass
        
    def stop(self):
        self.serial.close()
        self.alive = False
