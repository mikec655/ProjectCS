
Aansturing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  0000075e  000007f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000075e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004b  00800124  00800124  00000816  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000816  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000848  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014a9  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000922  00000000  00000000  00001e61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008d5  00000000  00000000  00002783  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000354  00000000  00000000  00003058  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000662  00000000  00000000  000033ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000669  00000000  00000000  00003a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00004077  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 04 03 	jmp	0x608	; 0x608 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e5       	ldi	r30, 0x5E	; 94
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 32       	cpi	r26, 0x24	; 36
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e2       	ldi	r26, 0x24	; 36
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 36       	cpi	r26, 0x6F	; 111
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6f 03 	call	0x6de	; 0x6de <main>
  9e:	0c 94 ad 03 	jmp	0x75a	; 0x75a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <turn_on_green_led>:

*/

void scheduler_start(void)
{
      sei();
  a6:	2c 9a       	sbi	0x05, 4	; 5
  a8:	08 95       	ret

000000aa <turn_off_green_led>:
  aa:	2c 98       	cbi	0x05, 4	; 5
  ac:	08 95       	ret

000000ae <turn_on_red_led>:
  ae:	2b 9a       	sbi	0x05, 3	; 5
  b0:	08 95       	ret

000000b2 <turn_off_red_led>:
  b2:	2b 98       	cbi	0x05, 3	; 5
  b4:	08 95       	ret

000000b6 <turn_on_yellow_led>:
  b6:	2a 9a       	sbi	0x05, 2	; 5
  b8:	08 95       	ret

000000ba <turn_off_yellow_led>:
  ba:	2a 98       	cbi	0x05, 2	; 5
  bc:	08 95       	ret

000000be <start_motor>:
  be:	29 98       	cbi	0x05, 1	; 5
  c0:	28 9a       	sbi	0x05, 0	; 5
  c2:	08 95       	ret

000000c4 <start_motor_reversed>:
  c4:	28 98       	cbi	0x05, 0	; 5
  c6:	29 9a       	sbi	0x05, 1	; 5
  c8:	08 95       	ret

000000ca <stop_motor>:
  ca:	85 b1       	in	r24, 0x05	; 5
  cc:	8c 7f       	andi	r24, 0xFC	; 252
  ce:	85 b9       	out	0x05, r24	; 5
  d0:	08 95       	ret

000000d2 <scheduler_add_task>:
  d2:	0f 93       	push	r16
  d4:	1f 93       	push	r17
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	8c 01       	movw	r16, r24
  dc:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <scheduler_tasks>
  e0:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <scheduler_tasks+0x1>
  e4:	89 2b       	or	r24, r25
  e6:	81 f0       	breq	.+32     	; 0x108 <scheduler_add_task+0x36>
  e8:	e9 e2       	ldi	r30, 0x29	; 41
  ea:	f1 e0       	ldi	r31, 0x01	; 1
  ec:	21 e0       	ldi	r18, 0x01	; 1
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	82 2f       	mov	r24, r18
  f2:	e9 01       	movw	r28, r18
  f4:	a7 81       	ldd	r26, Z+7	; 0x07
  f6:	b0 85       	ldd	r27, Z+8	; 0x08
  f8:	2f 5f       	subi	r18, 0xFF	; 255
  fa:	3f 4f       	sbci	r19, 0xFF	; 255
  fc:	37 96       	adiw	r30, 0x07	; 7
  fe:	ab 2b       	or	r26, r27
 100:	b9 f7       	brne	.-18     	; 0xf0 <scheduler_add_task+0x1e>
 102:	8a 30       	cpi	r24, 0x0A	; 10
 104:	21 f4       	brne	.+8      	; 0x10e <scheduler_add_task+0x3c>
 106:	15 c0       	rjmp	.+42     	; 0x132 <scheduler_add_task+0x60>
 108:	c0 e0       	ldi	r28, 0x00	; 0
 10a:	d0 e0       	ldi	r29, 0x00	; 0
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	fe 01       	movw	r30, r28
 110:	ee 0f       	add	r30, r30
 112:	ff 1f       	adc	r31, r31
 114:	ee 0f       	add	r30, r30
 116:	ff 1f       	adc	r31, r31
 118:	ee 0f       	add	r30, r30
 11a:	ff 1f       	adc	r31, r31
 11c:	ec 1b       	sub	r30, r28
 11e:	fd 0b       	sbc	r31, r29
 120:	e7 5d       	subi	r30, 0xD7	; 215
 122:	fe 4f       	sbci	r31, 0xFE	; 254
 124:	11 83       	std	Z+1, r17	; 0x01
 126:	00 83       	st	Z, r16
 128:	73 83       	std	Z+3, r23	; 0x03
 12a:	62 83       	std	Z+2, r22	; 0x02
 12c:	55 83       	std	Z+5, r21	; 0x05
 12e:	44 83       	std	Z+4, r20	; 0x04
 130:	16 82       	std	Z+6, r1	; 0x06
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	1f 91       	pop	r17
 138:	0f 91       	pop	r16
 13a:	08 95       	ret

0000013c <scheduler_delete_task>:
 13c:	27 e0       	ldi	r18, 0x07	; 7
 13e:	82 9f       	mul	r24, r18
 140:	c0 01       	movw	r24, r0
 142:	11 24       	eor	r1, r1
 144:	fc 01       	movw	r30, r24
 146:	e7 5d       	subi	r30, 0xD7	; 215
 148:	fe 4f       	sbci	r31, 0xFE	; 254
 14a:	11 82       	std	Z+1, r1	; 0x01
 14c:	10 82       	st	Z, r1
 14e:	13 82       	std	Z+3, r1	; 0x03
 150:	12 82       	std	Z+2, r1	; 0x02
 152:	15 82       	std	Z+5, r1	; 0x05
 154:	14 82       	std	Z+4, r1	; 0x04
 156:	16 82       	std	Z+6, r1	; 0x06
 158:	08 95       	ret

0000015a <scheduler_dispatch_tasks>:
 15a:	ef 92       	push	r14
 15c:	ff 92       	push	r15
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	c9 e2       	ldi	r28, 0x29	; 41
 166:	d1 e0       	ldi	r29, 0x01	; 1
 168:	10 e0       	ldi	r17, 0x00	; 0
 16a:	8e 81       	ldd	r24, Y+6	; 0x06
 16c:	88 23       	and	r24, r24
 16e:	79 f0       	breq	.+30     	; 0x18e <scheduler_dispatch_tasks+0x34>
 170:	e8 81       	ld	r30, Y
 172:	f9 81       	ldd	r31, Y+1	; 0x01
 174:	30 97       	sbiw	r30, 0x00	; 0
 176:	59 f0       	breq	.+22     	; 0x18e <scheduler_dispatch_tasks+0x34>
 178:	09 95       	icall
 17a:	8e 81       	ldd	r24, Y+6	; 0x06
 17c:	81 50       	subi	r24, 0x01	; 1
 17e:	8e 83       	std	Y+6, r24	; 0x06
 180:	8c 81       	ldd	r24, Y+4	; 0x04
 182:	9d 81       	ldd	r25, Y+5	; 0x05
 184:	89 2b       	or	r24, r25
 186:	19 f4       	brne	.+6      	; 0x18e <scheduler_dispatch_tasks+0x34>
 188:	81 2f       	mov	r24, r17
 18a:	0e 94 9e 00 	call	0x13c	; 0x13c <scheduler_delete_task>
 18e:	1f 5f       	subi	r17, 0xFF	; 255
 190:	27 96       	adiw	r28, 0x07	; 7
 192:	1a 30       	cpi	r17, 0x0A	; 10
 194:	51 f7       	brne	.-44     	; 0x16a <scheduler_dispatch_tasks+0x10>
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	1f 91       	pop	r17
 19c:	ff 90       	pop	r15
 19e:	ef 90       	pop	r14
 1a0:	08 95       	ret

000001a2 <scheduler_delete_all_tasks>:
 1a2:	cf 93       	push	r28
 1a4:	c0 e0       	ldi	r28, 0x00	; 0
 1a6:	8c 2f       	mov	r24, r28
 1a8:	0e 94 9e 00 	call	0x13c	; 0x13c <scheduler_delete_task>
 1ac:	cf 5f       	subi	r28, 0xFF	; 255
 1ae:	ca 30       	cpi	r28, 0x0A	; 10
 1b0:	d1 f7       	brne	.-12     	; 0x1a6 <scheduler_delete_all_tasks+0x4>
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <check_if_down>:
 1b6:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <__data_end>
 1ba:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <__data_end+0x1>
 1be:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <MAX_UITROL>
 1c2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <MAX_UITROL+0x1>
 1c6:	82 17       	cp	r24, r18
 1c8:	93 07       	cpc	r25, r19
 1ca:	30 f1       	brcs	.+76     	; 0x218 <check_if_down+0x62>
 1cc:	05 97       	sbiw	r24, 0x05	; 5
 1ce:	82 17       	cp	r24, r18
 1d0:	93 07       	cpc	r25, r19
 1d2:	10 f5       	brcc	.+68     	; 0x218 <check_if_down+0x62>
 1d4:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <scheduler_delete_all_tasks>
 1d8:	40 e0       	ldi	r20, 0x00	; 0
 1da:	50 e0       	ldi	r21, 0x00	; 0
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	70 e0       	ldi	r23, 0x00	; 0
 1e0:	8d e5       	ldi	r24, 0x5D	; 93
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 69 00 	call	0xd2	; 0xd2 <scheduler_add_task>
 1e8:	40 e0       	ldi	r20, 0x00	; 0
 1ea:	50 e0       	ldi	r21, 0x00	; 0
 1ec:	60 e0       	ldi	r22, 0x00	; 0
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	85 e6       	ldi	r24, 0x65	; 101
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 69 00 	call	0xd2	; 0xd2 <scheduler_add_task>
 1f8:	44 e1       	ldi	r20, 0x14	; 20
 1fa:	50 e0       	ldi	r21, 0x00	; 0
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	80 e6       	ldi	r24, 0x60	; 96
 202:	93 e0       	ldi	r25, 0x03	; 3
 204:	0e 94 69 00 	call	0xd2	; 0xd2 <scheduler_add_task>
 208:	44 e1       	ldi	r20, 0x14	; 20
 20a:	50 e0       	ldi	r21, 0x00	; 0
 20c:	6a e0       	ldi	r22, 0x0A	; 10
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	8e e2       	ldi	r24, 0x2E	; 46
 212:	92 e0       	ldi	r25, 0x02	; 2
 214:	0e 94 69 00 	call	0xd2	; 0xd2 <scheduler_add_task>
 218:	08 95       	ret

0000021a <check_if_up>:
 21a:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <__data_end>
 21e:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <__data_end+0x1>
 222:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <MIN_UITROL>
 226:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <MIN_UITROL+0x1>
 22a:	28 17       	cp	r18, r24
 22c:	39 07       	cpc	r19, r25
 22e:	30 f1       	brcs	.+76     	; 0x27c <check_if_up+0x62>
 230:	05 96       	adiw	r24, 0x05	; 5
 232:	28 17       	cp	r18, r24
 234:	39 07       	cpc	r19, r25
 236:	10 f5       	brcc	.+68     	; 0x27c <check_if_up+0x62>
 238:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <scheduler_delete_all_tasks>
 23c:	40 e0       	ldi	r20, 0x00	; 0
 23e:	50 e0       	ldi	r21, 0x00	; 0
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	70 e0       	ldi	r23, 0x00	; 0
 244:	8d e5       	ldi	r24, 0x5D	; 93
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 69 00 	call	0xd2	; 0xd2 <scheduler_add_task>
 24c:	40 e0       	ldi	r20, 0x00	; 0
 24e:	50 e0       	ldi	r21, 0x00	; 0
 250:	60 e0       	ldi	r22, 0x00	; 0
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	85 e6       	ldi	r24, 0x65	; 101
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 69 00 	call	0xd2	; 0xd2 <scheduler_add_task>
 25c:	44 e1       	ldi	r20, 0x14	; 20
 25e:	50 e0       	ldi	r21, 0x00	; 0
 260:	60 e0       	ldi	r22, 0x00	; 0
 262:	70 e0       	ldi	r23, 0x00	; 0
 264:	80 e6       	ldi	r24, 0x60	; 96
 266:	93 e0       	ldi	r25, 0x03	; 3
 268:	0e 94 69 00 	call	0xd2	; 0xd2 <scheduler_add_task>
 26c:	44 e1       	ldi	r20, 0x14	; 20
 26e:	50 e0       	ldi	r21, 0x00	; 0
 270:	6a e0       	ldi	r22, 0x0A	; 10
 272:	70 e0       	ldi	r23, 0x00	; 0
 274:	8e e2       	ldi	r24, 0x2E	; 46
 276:	92 e0       	ldi	r25, 0x02	; 2
 278:	0e 94 69 00 	call	0xd2	; 0xd2 <scheduler_add_task>
 27c:	08 95       	ret

0000027e <scheduler_init_timer1>:
 27e:	cf 93       	push	r28
 280:	c0 e0       	ldi	r28, 0x00	; 0
 282:	8c 2f       	mov	r24, r28
 284:	0e 94 9e 00 	call	0x13c	; 0x13c <scheduler_delete_task>
 288:	cf 5f       	subi	r28, 0xFF	; 255
 28a:	ca 30       	cpi	r28, 0x0A	; 10
 28c:	d1 f7       	brne	.-12     	; 0x282 <scheduler_init_timer1+0x4>
 28e:	81 e7       	ldi	r24, 0x71	; 113
 290:	92 e0       	ldi	r25, 0x02	; 2
 292:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 296:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 29a:	8c e0       	ldi	r24, 0x0C	; 12
 29c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 2a0:	82 e0       	ldi	r24, 0x02	; 2
 2a2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <__vector_11>:
op basis van de instellingen in scheduler_init_timer1().

*/

ISR(TIMER1_COMPA_vect)
{
 2aa:	1f 92       	push	r1
 2ac:	0f 92       	push	r0
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	0f 92       	push	r0
 2b2:	11 24       	eor	r1, r1
 2b4:	2f 93       	push	r18
 2b6:	3f 93       	push	r19
 2b8:	8f 93       	push	r24
 2ba:	9f 93       	push	r25
 2bc:	af 93       	push	r26
 2be:	bf 93       	push	r27
 2c0:	ef 93       	push	r30
 2c2:	ff 93       	push	r31
 2c4:	e9 e2       	ldi	r30, 0x29	; 41
 2c6:	f1 e0       	ldi	r31, 0x01	; 1
 2c8:	2f e6       	ldi	r18, 0x6F	; 111
 2ca:	31 e0       	ldi	r19, 0x01	; 1
   unsigned char index;
   for(index = 0; index < SCHEDULER_MAX_TASKS; index++)
   {
      // Controleert of een taak op index in array aanwezig is
      if(scheduler_tasks[index].pTask)
 2cc:	80 81       	ld	r24, Z
 2ce:	91 81       	ldd	r25, Z+1	; 0x01
 2d0:	89 2b       	or	r24, r25
 2d2:	91 f0       	breq	.+36     	; 0x2f8 <__vector_11+0x4e>
      {
         if(scheduler_tasks[index].Delay == 0)
 2d4:	82 81       	ldd	r24, Z+2	; 0x02
 2d6:	93 81       	ldd	r25, Z+3	; 0x03
 2d8:	00 97       	sbiw	r24, 0x00	; 0
 2da:	59 f4       	brne	.+22     	; 0x2f2 <__vector_11+0x48>
         {
            // Taak is klaar om uitgevoerd te worden, inc 'RunMe' flag 
            scheduler_tasks[index].RunMe += 1;
 2dc:	86 81       	ldd	r24, Z+6	; 0x06
 2de:	8f 5f       	subi	r24, 0xFF	; 255
 2e0:	86 83       	std	Z+6, r24	; 0x06

            if(scheduler_tasks[index].Period)
 2e2:	84 81       	ldd	r24, Z+4	; 0x04
 2e4:	95 81       	ldd	r25, Z+5	; 0x05
 2e6:	00 97       	sbiw	r24, 0x00	; 0
 2e8:	39 f0       	breq	.+14     	; 0x2f8 <__vector_11+0x4e>
            {
               // periodieke taken opnieuw instellen
               scheduler_tasks[index].Delay = scheduler_tasks[index].Period;
               scheduler_tasks[index].Delay -= 1;
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	93 83       	std	Z+3, r25	; 0x03
 2ee:	82 83       	std	Z+2, r24	; 0x02
 2f0:	03 c0       	rjmp	.+6      	; 0x2f8 <__vector_11+0x4e>
            }
         }
         else
         {
            // Verlaag Delay als taak niet klaar is om uitgevoerd te worden
            scheduler_tasks[index].Delay -= 1;
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	93 83       	std	Z+3, r25	; 0x03
 2f6:	82 83       	std	Z+2, r24	; 0x02
 2f8:	37 96       	adiw	r30, 0x07	; 7
*/

ISR(TIMER1_COMPA_vect)
{
   unsigned char index;
   for(index = 0; index < SCHEDULER_MAX_TASKS; index++)
 2fa:	e2 17       	cp	r30, r18
 2fc:	f3 07       	cpc	r31, r19
 2fe:	31 f7       	brne	.-52     	; 0x2cc <__vector_11+0x22>
            // Verlaag Delay als taak niet klaar is om uitgevoerd te worden
            scheduler_tasks[index].Delay -= 1;
         }
      }
   }
}
 300:	ff 91       	pop	r31
 302:	ef 91       	pop	r30
 304:	bf 91       	pop	r27
 306:	af 91       	pop	r26
 308:	9f 91       	pop	r25
 30a:	8f 91       	pop	r24
 30c:	3f 91       	pop	r19
 30e:	2f 91       	pop	r18
 310:	0f 90       	pop	r0
 312:	0f be       	out	0x3f, r0	; 63
 314:	0f 90       	pop	r0
 316:	1f 90       	pop	r1
 318:	18 95       	reti

0000031a <init_ports>:
void init_ports(void)
{
    // set pin PB4 (arduino: 12) as output for GREEN LED
    // set pin PB3 (arduino: 11) as output for RED LED
    // set pin PB2 (arduino: 10) as output for YELLOW LED
    DDRB |= 0b00011100;
 31a:	84 b1       	in	r24, 0x04	; 4
 31c:	8c 61       	ori	r24, 0x1C	; 28
 31e:	84 b9       	out	0x04, r24	; 4
    // set pin PB1 (arduino: 9) as output for motor (reversed)
    // set pin PB0 (arduino: 8) as output for motor
    DDRB |= 0b00000011;
 320:	84 b1       	in	r24, 0x04	; 4
 322:	83 60       	ori	r24, 0x03	; 3
 324:	84 b9       	out	0x04, r24	; 4
    // set pin PD4 (arduino: 4) as output for Trigger Ultrasoonsensor
    DDRD |= 0b00010000;
 326:	54 9a       	sbi	0x0a, 4	; 10
    // set pin PD3 (arduino: 3) as input for Echo Ultrasoonsensor
    DDRD &= 0b11110111;
 328:	53 98       	cbi	0x0a, 3	; 10
 32a:	08 95       	ret

0000032c <init_ext_int1>:

void init_ext_int1(void)
{
    // Voor lezen Echo van Ultrasoonsensor
    // any change triggers ext interrupt 1
    EICRA = (1 << ISC10);
 32c:	84 e0       	ldi	r24, 0x04	; 4
 32e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    EIMSK = (1 << INT1);
 332:	82 e0       	ldi	r24, 0x02	; 2
 334:	8d bb       	out	0x1d, r24	; 29
 336:	08 95       	ret

00000338 <init_timer0>:
}

void init_timer0()
{
    TCCR0A = 0;
 338:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0;
 33a:	15 bc       	out	0x25, r1	; 37
    // Enable Overflow Interrupt 
    TIMSK0 = (1<<TOIE0);
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 342:	08 95       	ret

00000344 <init_uart>:

void init_uart(void)
{
	// baud rate
    uint8_t UBBRVAL = 51;
	UBRR0H = 0;
 344:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBBRVAL;
 348:	83 e3       	ldi	r24, 0x33	; 51
 34a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	// disable U2X mode
	UCSR0A = 0;
 34e:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	// set transmitter en receiver aan
	UCSR0B = (1<<TXEN0) | (1<<RXEN0);
 352:	88 e1       	ldi	r24, 0x18	; 24
 354:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
 358:	86 e0       	ldi	r24, 0x06	; 6
 35a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 35e:	08 95       	ret

00000360 <transmit>:
// uart functies 
void transmit(uint8_t data)
{
	// wacht totdat transmit buffer leeg is
	// UDRE wordt gezet wanneer de transmit buffer leeg is
	loop_until_bit_is_set(UCSR0A, UDRE0);
 360:	e0 ec       	ldi	r30, 0xC0	; 192
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	90 81       	ld	r25, Z
 366:	95 ff       	sbrs	r25, 5
 368:	fd cf       	rjmp	.-6      	; 0x364 <transmit+0x4>
	// zet dat in UDR
	UDR0 = data;
 36a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 36e:	08 95       	ret

00000370 <transmit_string>:
}

void transmit_string(char* data)
{
 370:	1f 93       	push	r17
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < strlen(data); i++){
 378:	10 e0       	ldi	r17, 0x00	; 0
 37a:	07 c0       	rjmp	.+14     	; 0x38a <transmit_string+0x1a>
		transmit(data[i]);
 37c:	fe 01       	movw	r30, r28
 37e:	e8 0f       	add	r30, r24
 380:	f9 1f       	adc	r31, r25
 382:	80 81       	ld	r24, Z
 384:	0e 94 b0 01 	call	0x360	; 0x360 <transmit>
	UDR0 = data;
}

void transmit_string(char* data)
{
	for (uint8_t i = 0; i < strlen(data); i++){
 388:	1f 5f       	subi	r17, 0xFF	; 255
 38a:	81 2f       	mov	r24, r17
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	fe 01       	movw	r30, r28
 390:	01 90       	ld	r0, Z+
 392:	00 20       	and	r0, r0
 394:	e9 f7       	brne	.-6      	; 0x390 <transmit_string+0x20>
 396:	31 97       	sbiw	r30, 0x01	; 1
 398:	ec 1b       	sub	r30, r28
 39a:	fd 0b       	sbc	r31, r29
 39c:	8e 17       	cp	r24, r30
 39e:	9f 07       	cpc	r25, r31
 3a0:	68 f3       	brcs	.-38     	; 0x37c <transmit_string+0xc>
		transmit(data[i]);
	}
}
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	1f 91       	pop	r17
 3a8:	08 95       	ret

000003aa <init_connection>:
		scheduler_add_task(refresh_distance, 0, 20);
		scheduler_add_task(action, 10, 20);
	}
}

void init_connection(void) {
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	cd b7       	in	r28, 0x3d	; 61
 3b0:	de b7       	in	r29, 0x3e	; 62
 3b2:	60 97       	sbiw	r28, 0x10	; 16
 3b4:	0f b6       	in	r0, 0x3f	; 63
 3b6:	f8 94       	cli
 3b8:	de bf       	out	0x3e, r29	; 62
 3ba:	0f be       	out	0x3f, r0	; 63
 3bc:	cd bf       	out	0x3d, r28	; 61
    char type[16] = "_MTR\n";
 3be:	86 e0       	ldi	r24, 0x06	; 6
 3c0:	e4 e0       	ldi	r30, 0x04	; 4
 3c2:	f1 e0       	ldi	r31, 0x01	; 1
 3c4:	de 01       	movw	r26, r28
 3c6:	11 96       	adiw	r26, 0x01	; 1
 3c8:	01 90       	ld	r0, Z+
 3ca:	0d 92       	st	X+, r0
 3cc:	8a 95       	dec	r24
 3ce:	e1 f7       	brne	.-8      	; 0x3c8 <init_connection+0x1e>
 3d0:	fe 01       	movw	r30, r28
 3d2:	37 96       	adiw	r30, 0x07	; 7
 3d4:	8a e0       	ldi	r24, 0x0A	; 10
 3d6:	df 01       	movw	r26, r30
 3d8:	1d 92       	st	X+, r1
 3da:	8a 95       	dec	r24
 3dc:	e9 f7       	brne	.-6      	; 0x3d8 <init_connection+0x2e>
	transmit_string(type);
 3de:	ce 01       	movw	r24, r28
 3e0:	01 96       	adiw	r24, 0x01	; 1
 3e2:	0e 94 b8 01 	call	0x370	; 0x370 <transmit_string>
    scheduler_delete_all_tasks();
 3e6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <scheduler_delete_all_tasks>
    scheduler_add_task(refresh_distance, 0, 20);
 3ea:	44 e1       	ldi	r20, 0x14	; 20
 3ec:	50 e0       	ldi	r21, 0x00	; 0
 3ee:	60 e0       	ldi	r22, 0x00	; 0
 3f0:	70 e0       	ldi	r23, 0x00	; 0
 3f2:	80 e6       	ldi	r24, 0x60	; 96
 3f4:	93 e0       	ldi	r25, 0x03	; 3
 3f6:	0e 94 69 00 	call	0xd2	; 0xd2 <scheduler_add_task>
	scheduler_add_task(action, 10, 20);
 3fa:	44 e1       	ldi	r20, 0x14	; 20
 3fc:	50 e0       	ldi	r21, 0x00	; 0
 3fe:	6a e0       	ldi	r22, 0x0A	; 10
 400:	70 e0       	ldi	r23, 0x00	; 0
 402:	8e e2       	ldi	r24, 0x2E	; 46
 404:	92 e0       	ldi	r25, 0x02	; 2
 406:	0e 94 69 00 	call	0xd2	; 0xd2 <scheduler_add_task>
}
 40a:	60 96       	adiw	r28, 0x10	; 16
 40c:	0f b6       	in	r0, 0x3f	; 63
 40e:	f8 94       	cli
 410:	de bf       	out	0x3e, r29	; 62
 412:	0f be       	out	0x3f, r0	; 63
 414:	cd bf       	out	0x3d, r28	; 61
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	08 95       	ret

0000041c <receive>:

uint8_t receive(void)
{
	// wacht totdat er data op de recieve buffer wordt gezet 
    // RXC0 wordt gezet wanneer de er data in de recieve buffer staat
    loop_until_bit_is_set(UCSR0A, RXC0);
 41c:	e0 ec       	ldi	r30, 0xC0	; 192
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	80 81       	ld	r24, Z
 422:	88 23       	and	r24, r24
 424:	ec f7       	brge	.-6      	; 0x420 <receive+0x4>
	return UDR0;
 426:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 42a:	08 95       	ret

0000042c <receive_string>:

void receive_string(char* data){
 42c:	0f 93       	push	r16
 42e:	1f 93       	push	r17
 430:	cf 93       	push	r28
 432:	8c 01       	movw	r16, r24
	uint8_t i = 0;
	strcpy(data, "");
 434:	fc 01       	movw	r30, r24
 436:	10 82       	st	Z, r1
	char c = receive();
 438:	0e 94 0e 02 	call	0x41c	; 0x41c <receive>
	while (c != '\n') {
 43c:	8a 30       	cpi	r24, 0x0A	; 10
 43e:	51 f0       	breq	.+20     	; 0x454 <receive_string+0x28>
 440:	c0 e0       	ldi	r28, 0x00	; 0
		data[i] = c;
 442:	f8 01       	movw	r30, r16
 444:	ec 0f       	add	r30, r28
 446:	f1 1d       	adc	r31, r1
 448:	80 83       	st	Z, r24
		i++;
 44a:	cf 5f       	subi	r28, 0xFF	; 255
		c = receive();
 44c:	0e 94 0e 02 	call	0x41c	; 0x41c <receive>

void receive_string(char* data){
	uint8_t i = 0;
	strcpy(data, "");
	char c = receive();
	while (c != '\n') {
 450:	8a 30       	cpi	r24, 0x0A	; 10
 452:	b9 f7       	brne	.-18     	; 0x442 <receive_string+0x16>
		data[i] = c;
		i++;
		c = receive();
	}
}
 454:	cf 91       	pop	r28
 456:	1f 91       	pop	r17
 458:	0f 91       	pop	r16
 45a:	08 95       	ret

0000045c <action>:
    scheduler_add_task(refresh_distance, 0, 20);
	scheduler_add_task(action, 10, 20);
}

void action(void)
{
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	cd b7       	in	r28, 0x3d	; 61
 462:	de b7       	in	r29, 0x3e	; 62
 464:	60 97       	sbiw	r28, 0x10	; 16
 466:	0f b6       	in	r0, 0x3f	; 63
 468:	f8 94       	cli
 46a:	de bf       	out	0x3e, r29	; 62
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	cd bf       	out	0x3d, r28	; 61
	char action[16] = "";
 470:	1a 82       	std	Y+2, r1	; 0x02
 472:	19 82       	std	Y+1, r1	; 0x01
 474:	fe 01       	movw	r30, r28
 476:	33 96       	adiw	r30, 0x03	; 3
 478:	8e e0       	ldi	r24, 0x0E	; 14
 47a:	df 01       	movw	r26, r30
 47c:	1d 92       	st	X+, r1
 47e:	8a 95       	dec	r24
 480:	e9 f7       	brne	.-6      	; 0x47c <action+0x20>
	receive_string(action);
 482:	ce 01       	movw	r24, r28
 484:	01 96       	adiw	r24, 0x01	; 1
 486:	0e 94 16 02 	call	0x42c	; 0x42c <receive_string>
    //init
    if (strcmp(action, "_INIT") == 0) {
 48a:	64 e1       	ldi	r22, 0x14	; 20
 48c:	71 e0       	ldi	r23, 0x01	; 1
 48e:	ce 01       	movw	r24, r28
 490:	01 96       	adiw	r24, 0x01	; 1
 492:	0e 94 a4 03 	call	0x748	; 0x748 <strcmp>
 496:	89 2b       	or	r24, r25
 498:	51 f4       	brne	.+20     	; 0x4ae <action+0x52>
		scheduler_delete_all_tasks();
 49a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <scheduler_delete_all_tasks>
        scheduler_add_task(init_connection, 0, 0);
 49e:	40 e0       	ldi	r20, 0x00	; 0
 4a0:	50 e0       	ldi	r21, 0x00	; 0
 4a2:	60 e0       	ldi	r22, 0x00	; 0
 4a4:	70 e0       	ldi	r23, 0x00	; 0
 4a6:	85 ed       	ldi	r24, 0xD5	; 213
 4a8:	91 e0       	ldi	r25, 0x01	; 1
 4aa:	0e 94 69 00 	call	0xd2	; 0xd2 <scheduler_add_task>
	}
	// uitrollen
	if (strcmp(action, "_DWN") == 0) {
 4ae:	6a e1       	ldi	r22, 0x1A	; 26
 4b0:	71 e0       	ldi	r23, 0x01	; 1
 4b2:	ce 01       	movw	r24, r28
 4b4:	01 96       	adiw	r24, 0x01	; 1
 4b6:	0e 94 a4 03 	call	0x748	; 0x748 <strcmp>
 4ba:	89 2b       	or	r24, r25
 4bc:	d9 f5       	brne	.+118    	; 0x534 <action+0xd8>
		scheduler_delete_all_tasks();
 4be:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <scheduler_delete_all_tasks>
		scheduler_add_task(turn_off_green_led, 0, 0);
 4c2:	40 e0       	ldi	r20, 0x00	; 0
 4c4:	50 e0       	ldi	r21, 0x00	; 0
 4c6:	60 e0       	ldi	r22, 0x00	; 0
 4c8:	70 e0       	ldi	r23, 0x00	; 0
 4ca:	85 e5       	ldi	r24, 0x55	; 85
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	0e 94 69 00 	call	0xd2	; 0xd2 <scheduler_add_task>
		scheduler_add_task(turn_on_red_led, 0, 0);
 4d2:	40 e0       	ldi	r20, 0x00	; 0
 4d4:	50 e0       	ldi	r21, 0x00	; 0
 4d6:	60 e0       	ldi	r22, 0x00	; 0
 4d8:	70 e0       	ldi	r23, 0x00	; 0
 4da:	87 e5       	ldi	r24, 0x57	; 87
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	0e 94 69 00 	call	0xd2	; 0xd2 <scheduler_add_task>
		scheduler_add_task(turn_on_yellow_led, 0, 50);
 4e2:	42 e3       	ldi	r20, 0x32	; 50
 4e4:	50 e0       	ldi	r21, 0x00	; 0
 4e6:	60 e0       	ldi	r22, 0x00	; 0
 4e8:	70 e0       	ldi	r23, 0x00	; 0
 4ea:	8b e5       	ldi	r24, 0x5B	; 91
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	0e 94 69 00 	call	0xd2	; 0xd2 <scheduler_add_task>
		scheduler_add_task(turn_off_yellow_led, 25, 50);
 4f2:	42 e3       	ldi	r20, 0x32	; 50
 4f4:	50 e0       	ldi	r21, 0x00	; 0
 4f6:	69 e1       	ldi	r22, 0x19	; 25
 4f8:	70 e0       	ldi	r23, 0x00	; 0
 4fa:	8d e5       	ldi	r24, 0x5D	; 93
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	0e 94 69 00 	call	0xd2	; 0xd2 <scheduler_add_task>
		scheduler_add_task(start_motor_reversed, 0, 0);
 502:	40 e0       	ldi	r20, 0x00	; 0
 504:	50 e0       	ldi	r21, 0x00	; 0
 506:	60 e0       	ldi	r22, 0x00	; 0
 508:	70 e0       	ldi	r23, 0x00	; 0
 50a:	82 e6       	ldi	r24, 0x62	; 98
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	0e 94 69 00 	call	0xd2	; 0xd2 <scheduler_add_task>
		scheduler_add_task(refresh_distance, 0, 20);
 512:	44 e1       	ldi	r20, 0x14	; 20
 514:	50 e0       	ldi	r21, 0x00	; 0
 516:	60 e0       	ldi	r22, 0x00	; 0
 518:	70 e0       	ldi	r23, 0x00	; 0
 51a:	80 e6       	ldi	r24, 0x60	; 96
 51c:	93 e0       	ldi	r25, 0x03	; 3
 51e:	0e 94 69 00 	call	0xd2	; 0xd2 <scheduler_add_task>
		scheduler_add_task(check_if_down, 10, 20);
 522:	44 e1       	ldi	r20, 0x14	; 20
 524:	50 e0       	ldi	r21, 0x00	; 0
 526:	6a e0       	ldi	r22, 0x0A	; 10
 528:	70 e0       	ldi	r23, 0x00	; 0
 52a:	8b ed       	ldi	r24, 0xDB	; 219
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 69 00 	call	0xd2	; 0xd2 <scheduler_add_task>
 532:	42 c0       	rjmp	.+132    	; 0x5b8 <action+0x15c>
	}
	// inrollen
	else if (strcmp(action, "_UP") == 0) {
 534:	6f e1       	ldi	r22, 0x1F	; 31
 536:	71 e0       	ldi	r23, 0x01	; 1
 538:	ce 01       	movw	r24, r28
 53a:	01 96       	adiw	r24, 0x01	; 1
 53c:	0e 94 a4 03 	call	0x748	; 0x748 <strcmp>
 540:	89 2b       	or	r24, r25
 542:	d1 f5       	brne	.+116    	; 0x5b8 <action+0x15c>
		scheduler_delete_all_tasks();
 544:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <scheduler_delete_all_tasks>
		scheduler_add_task(turn_off_red_led, 0, 0);
 548:	40 e0       	ldi	r20, 0x00	; 0
 54a:	50 e0       	ldi	r21, 0x00	; 0
 54c:	60 e0       	ldi	r22, 0x00	; 0
 54e:	70 e0       	ldi	r23, 0x00	; 0
 550:	89 e5       	ldi	r24, 0x59	; 89
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	0e 94 69 00 	call	0xd2	; 0xd2 <scheduler_add_task>
		scheduler_add_task(turn_on_green_led, 0, 0);
 558:	40 e0       	ldi	r20, 0x00	; 0
 55a:	50 e0       	ldi	r21, 0x00	; 0
 55c:	60 e0       	ldi	r22, 0x00	; 0
 55e:	70 e0       	ldi	r23, 0x00	; 0
 560:	83 e5       	ldi	r24, 0x53	; 83
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	0e 94 69 00 	call	0xd2	; 0xd2 <scheduler_add_task>
		scheduler_add_task(turn_on_yellow_led, 0, 50);
 568:	42 e3       	ldi	r20, 0x32	; 50
 56a:	50 e0       	ldi	r21, 0x00	; 0
 56c:	60 e0       	ldi	r22, 0x00	; 0
 56e:	70 e0       	ldi	r23, 0x00	; 0
 570:	8b e5       	ldi	r24, 0x5B	; 91
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	0e 94 69 00 	call	0xd2	; 0xd2 <scheduler_add_task>
		scheduler_add_task(turn_off_yellow_led, 25, 50);
 578:	42 e3       	ldi	r20, 0x32	; 50
 57a:	50 e0       	ldi	r21, 0x00	; 0
 57c:	69 e1       	ldi	r22, 0x19	; 25
 57e:	70 e0       	ldi	r23, 0x00	; 0
 580:	8d e5       	ldi	r24, 0x5D	; 93
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	0e 94 69 00 	call	0xd2	; 0xd2 <scheduler_add_task>
		scheduler_add_task(start_motor, 0, 0);
 588:	40 e0       	ldi	r20, 0x00	; 0
 58a:	50 e0       	ldi	r21, 0x00	; 0
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	70 e0       	ldi	r23, 0x00	; 0
 590:	8f e5       	ldi	r24, 0x5F	; 95
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	0e 94 69 00 	call	0xd2	; 0xd2 <scheduler_add_task>
		scheduler_add_task(refresh_distance, 0, 20);
 598:	44 e1       	ldi	r20, 0x14	; 20
 59a:	50 e0       	ldi	r21, 0x00	; 0
 59c:	60 e0       	ldi	r22, 0x00	; 0
 59e:	70 e0       	ldi	r23, 0x00	; 0
 5a0:	80 e6       	ldi	r24, 0x60	; 96
 5a2:	93 e0       	ldi	r25, 0x03	; 3
 5a4:	0e 94 69 00 	call	0xd2	; 0xd2 <scheduler_add_task>
		scheduler_add_task(check_if_up, 10, 20);
 5a8:	44 e1       	ldi	r20, 0x14	; 20
 5aa:	50 e0       	ldi	r21, 0x00	; 0
 5ac:	6a e0       	ldi	r22, 0x0A	; 10
 5ae:	70 e0       	ldi	r23, 0x00	; 0
 5b0:	8d e0       	ldi	r24, 0x0D	; 13
 5b2:	91 e0       	ldi	r25, 0x01	; 1
 5b4:	0e 94 69 00 	call	0xd2	; 0xd2 <scheduler_add_task>
	}
	
}
 5b8:	60 96       	adiw	r28, 0x10	; 16
 5ba:	0f b6       	in	r0, 0x3f	; 63
 5bc:	f8 94       	cli
 5be:	de bf       	out	0x3e, r29	; 62
 5c0:	0f be       	out	0x3f, r0	; 63
 5c2:	cd bf       	out	0x3d, r28	; 61
 5c4:	df 91       	pop	r29
 5c6:	cf 91       	pop	r28
 5c8:	08 95       	ret

000005ca <__vector_16>:
		init_timer0();
	}
}

ISR (TIMER0_OVF_vect)
{
 5ca:	1f 92       	push	r1
 5cc:	0f 92       	push	r0
 5ce:	0f b6       	in	r0, 0x3f	; 63
 5d0:	0f 92       	push	r0
 5d2:	11 24       	eor	r1, r1
 5d4:	8f 93       	push	r24
 5d6:	9f 93       	push	r25
    // Verhoog counter bij overflow interrupt timer 1
    counter++;
 5d8:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <counter>
 5dc:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <counter+0x1>
 5e0:	01 96       	adiw	r24, 0x01	; 1
 5e2:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <counter+0x1>
 5e6:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <counter>
}
 5ea:	9f 91       	pop	r25
 5ec:	8f 91       	pop	r24
 5ee:	0f 90       	pop	r0
 5f0:	0f be       	out	0x3f, r0	; 63
 5f2:	0f 90       	pop	r0
 5f4:	1f 90       	pop	r1
 5f6:	18 95       	reti

000005f8 <start_timer0>:

void start_timer0(void)
{
    // Reset counter van Timer en counter
    TCNT0 = 0;
 5f8:	16 bc       	out	0x26, r1	; 38
    counter = 0;
 5fa:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <counter+0x1>
 5fe:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <counter>
    // start timer0 met prescaler 64
    TCCR0B = (1<<CS01) | (1<<CS00);
 602:	83 e0       	ldi	r24, 0x03	; 3
 604:	85 bd       	out	0x25, r24	; 37
 606:	08 95       	ret

00000608 <__vector_2>:

// Ultrasoon functies
void start_timer0(void);

ISR (INT1_vect)
{
 608:	1f 92       	push	r1
 60a:	0f 92       	push	r0
 60c:	0f b6       	in	r0, 0x3f	; 63
 60e:	0f 92       	push	r0
 610:	11 24       	eor	r1, r1
 612:	2f 93       	push	r18
 614:	3f 93       	push	r19
 616:	4f 93       	push	r20
 618:	5f 93       	push	r21
 61a:	6f 93       	push	r22
 61c:	7f 93       	push	r23
 61e:	8f 93       	push	r24
 620:	9f 93       	push	r25
 622:	af 93       	push	r26
 624:	bf 93       	push	r27
 626:	ef 93       	push	r30
 628:	ff 93       	push	r31
 62a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <echo>
    echo = (~echo) & 1; //invert echo flag
 62e:	91 e0       	ldi	r25, 0x01	; 1
 630:	28 2f       	mov	r18, r24
 632:	21 70       	andi	r18, 0x01	; 1
 634:	80 fd       	sbrc	r24, 0
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <echo>
	if (echo){
 63c:	21 11       	cpse	r18, r1
 63e:	03 c0       	rjmp	.+6      	; 0x646 <__vector_2+0x3e>
		start_timer0();
 640:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <start_timer0>
 644:	02 c0       	rjmp	.+4      	; 0x64a <__vector_2+0x42>
	} else {
		init_timer0();
 646:	0e 94 9c 01 	call	0x338	; 0x338 <init_timer0>
	}
}
 64a:	ff 91       	pop	r31
 64c:	ef 91       	pop	r30
 64e:	bf 91       	pop	r27
 650:	af 91       	pop	r26
 652:	9f 91       	pop	r25
 654:	8f 91       	pop	r24
 656:	7f 91       	pop	r23
 658:	6f 91       	pop	r22
 65a:	5f 91       	pop	r21
 65c:	4f 91       	pop	r20
 65e:	3f 91       	pop	r19
 660:	2f 91       	pop	r18
 662:	0f 90       	pop	r0
 664:	0f be       	out	0x3f, r0	; 63
 666:	0f 90       	pop	r0
 668:	1f 90       	pop	r1
 66a:	18 95       	reti

0000066c <send_trigger>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 66c:	2f ef       	ldi	r18, 0xFF	; 255
 66e:	80 e7       	ldi	r24, 0x70	; 112
 670:	92 e0       	ldi	r25, 0x02	; 2
 672:	21 50       	subi	r18, 0x01	; 1
 674:	80 40       	sbci	r24, 0x00	; 0
 676:	90 40       	sbci	r25, 0x00	; 0
 678:	e1 f7       	brne	.-8      	; 0x672 <send_trigger+0x6>
 67a:	00 c0       	rjmp	.+0      	; 0x67c <send_trigger+0x10>
 67c:	00 00       	nop
}

void send_trigger(void)
{
	_delay_ms(50);		//Restart HC-SR04
	PORTD &=~ (1 << PIND4);
 67e:	5c 98       	cbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 680:	25 e0       	ldi	r18, 0x05	; 5
 682:	2a 95       	dec	r18
 684:	f1 f7       	brne	.-4      	; 0x682 <send_trigger+0x16>
 686:	00 00       	nop
	_delay_us(1);
	PORTD |= (1 << PIND4); //Send 10us second pulse
 688:	5c 9a       	sbi	0x0b, 4	; 11
 68a:	85 e3       	ldi	r24, 0x35	; 53
 68c:	8a 95       	dec	r24
 68e:	f1 f7       	brne	.-4      	; 0x68c <send_trigger+0x20>
 690:	00 00       	nop
	_delay_us(10);
	PORTD &=~ (1 << PIND4);
 692:	5c 98       	cbi	0x0b, 4	; 11
 694:	08 95       	ret

00000696 <calc_cm>:
}

uint16_t calc_cm(uint16_t counter)
{
    uint16_t result = (counter * 256 + TCNT0) * 4 / 58;
 696:	96 b5       	in	r25, 0x26	; 38
	return result;
 698:	20 e0       	ldi	r18, 0x00	; 0
 69a:	30 e0       	ldi	r19, 0x00	; 0
 69c:	38 2f       	mov	r19, r24
 69e:	29 0f       	add	r18, r25
 6a0:	31 1d       	adc	r19, r1
 6a2:	22 0f       	add	r18, r18
 6a4:	33 1f       	adc	r19, r19
 6a6:	22 0f       	add	r18, r18
 6a8:	33 1f       	adc	r19, r19
 6aa:	af e9       	ldi	r26, 0x9F	; 159
 6ac:	b6 e4       	ldi	r27, 0x46	; 70
 6ae:	0e 94 95 03 	call	0x72a	; 0x72a <__umulhisi3>
}
 6b2:	92 95       	swap	r25
 6b4:	82 95       	swap	r24
 6b6:	8f 70       	andi	r24, 0x0F	; 15
 6b8:	89 27       	eor	r24, r25
 6ba:	9f 70       	andi	r25, 0x0F	; 15
 6bc:	89 27       	eor	r24, r25
 6be:	08 95       	ret

000006c0 <refresh_distance>:

void refresh_distance(void)
{
    send_trigger();
 6c0:	0e 94 36 03 	call	0x66c	; 0x66c <send_trigger>
	distance = calc_cm(counter);
 6c4:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <counter>
 6c8:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <counter+0x1>
 6cc:	0e 94 4b 03 	call	0x696	; 0x696 <calc_cm>
 6d0:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
 6d4:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__data_end+0x1>
	transmit(distance);
 6d8:	0e 94 b0 01 	call	0x360	; 0x360 <transmit>
 6dc:	08 95       	ret

000006de <main>:
}

int main()
{ 
	//init
    init_ports();
 6de:	0e 94 8d 01 	call	0x31a	; 0x31a <init_ports>
    init_uart();
 6e2:	0e 94 a2 01 	call	0x344	; 0x344 <init_uart>
    init_ext_int1();
 6e6:	0e 94 96 01 	call	0x32c	; 0x32c <init_ext_int1>
    init_timer0();
 6ea:	0e 94 9c 01 	call	0x338	; 0x338 <init_timer0>
	scheduler_init_timer1();
 6ee:	0e 94 3f 01 	call	0x27e	; 0x27e <scheduler_init_timer1>
    // tasks
	scheduler_add_task(turn_on_yellow_led, 0, 0);
 6f2:	40 e0       	ldi	r20, 0x00	; 0
 6f4:	50 e0       	ldi	r21, 0x00	; 0
 6f6:	60 e0       	ldi	r22, 0x00	; 0
 6f8:	70 e0       	ldi	r23, 0x00	; 0
 6fa:	8b e5       	ldi	r24, 0x5B	; 91
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	0e 94 69 00 	call	0xd2	; 0xd2 <scheduler_add_task>
	scheduler_add_task(refresh_distance, 0, 20);
 702:	44 e1       	ldi	r20, 0x14	; 20
 704:	50 e0       	ldi	r21, 0x00	; 0
 706:	60 e0       	ldi	r22, 0x00	; 0
 708:	70 e0       	ldi	r23, 0x00	; 0
 70a:	80 e6       	ldi	r24, 0x60	; 96
 70c:	93 e0       	ldi	r25, 0x03	; 3
 70e:	0e 94 69 00 	call	0xd2	; 0xd2 <scheduler_add_task>
	scheduler_add_task(action, 10, 20);
 712:	44 e1       	ldi	r20, 0x14	; 20
 714:	50 e0       	ldi	r21, 0x00	; 0
 716:	6a e0       	ldi	r22, 0x0A	; 10
 718:	70 e0       	ldi	r23, 0x00	; 0
 71a:	8e e2       	ldi	r24, 0x2E	; 46
 71c:	92 e0       	ldi	r25, 0x02	; 2
 71e:	0e 94 69 00 	call	0xd2	; 0xd2 <scheduler_add_task>

*/

void scheduler_start(void)
{
      sei();
 722:	78 94       	sei
	scheduler_add_task(refresh_distance, 0, 20);
	scheduler_add_task(action, 10, 20);
    // start de scheduler
	scheduler_start();
	while (1) {
		scheduler_dispatch_tasks();
 724:	0e 94 ad 00 	call	0x15a	; 0x15a <scheduler_dispatch_tasks>
 728:	fd cf       	rjmp	.-6      	; 0x724 <main+0x46>

0000072a <__umulhisi3>:
 72a:	a2 9f       	mul	r26, r18
 72c:	b0 01       	movw	r22, r0
 72e:	b3 9f       	mul	r27, r19
 730:	c0 01       	movw	r24, r0
 732:	a3 9f       	mul	r26, r19
 734:	70 0d       	add	r23, r0
 736:	81 1d       	adc	r24, r1
 738:	11 24       	eor	r1, r1
 73a:	91 1d       	adc	r25, r1
 73c:	b2 9f       	mul	r27, r18
 73e:	70 0d       	add	r23, r0
 740:	81 1d       	adc	r24, r1
 742:	11 24       	eor	r1, r1
 744:	91 1d       	adc	r25, r1
 746:	08 95       	ret

00000748 <strcmp>:
 748:	fb 01       	movw	r30, r22
 74a:	dc 01       	movw	r26, r24
 74c:	8d 91       	ld	r24, X+
 74e:	01 90       	ld	r0, Z+
 750:	80 19       	sub	r24, r0
 752:	01 10       	cpse	r0, r1
 754:	d9 f3       	breq	.-10     	; 0x74c <strcmp+0x4>
 756:	99 0b       	sbc	r25, r25
 758:	08 95       	ret

0000075a <_exit>:
 75a:	f8 94       	cli

0000075c <__stop_program>:
 75c:	ff cf       	rjmp	.-2      	; 0x75c <__stop_program>
