
Besturingseenheden.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000034a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800100  00800100  0000034a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000034a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a46  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000083f  00000000  00000000  00000e92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004c7  00000000  00000000  000016d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  00001b98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a1  00000000  00000000  00001d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002db  00000000  00000000  000021bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002498  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 32       	cpi	r26, 0x28	; 40
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 4d 01 	call	0x29a	; 0x29a <main>
  88:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <scheduler_add_task>:
{
	// wacht totdat er data op de recieve buffer wordt gezet 
    // RXC0 wordt gezet wanneer de er data in de recieve buffer staat
    loop_until_bit_is_set(UCSR0A, RXC0);
	return UDR0;
}
  90:	0f 93       	push	r16
  92:	1f 93       	push	r17
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	8c 01       	movw	r16, r24
  9a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <scheduler_tasks>
  9e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <scheduler_tasks+0x1>
  a2:	89 2b       	or	r24, r25
  a4:	81 f0       	breq	.+32     	; 0xc6 <scheduler_add_task+0x36>
  a6:	e5 e0       	ldi	r30, 0x05	; 5
  a8:	f1 e0       	ldi	r31, 0x01	; 1
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	82 2f       	mov	r24, r18
  b0:	e9 01       	movw	r28, r18
  b2:	a7 81       	ldd	r26, Z+7	; 0x07
  b4:	b0 85       	ldd	r27, Z+8	; 0x08
  b6:	2f 5f       	subi	r18, 0xFF	; 255
  b8:	3f 4f       	sbci	r19, 0xFF	; 255
  ba:	37 96       	adiw	r30, 0x07	; 7
  bc:	ab 2b       	or	r26, r27
  be:	b9 f7       	brne	.-18     	; 0xae <scheduler_add_task+0x1e>
  c0:	85 30       	cpi	r24, 0x05	; 5
  c2:	21 f4       	brne	.+8      	; 0xcc <scheduler_add_task+0x3c>
  c4:	15 c0       	rjmp	.+42     	; 0xf0 <scheduler_add_task+0x60>
  c6:	c0 e0       	ldi	r28, 0x00	; 0
  c8:	d0 e0       	ldi	r29, 0x00	; 0
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	fe 01       	movw	r30, r28
  ce:	ee 0f       	add	r30, r30
  d0:	ff 1f       	adc	r31, r31
  d2:	ee 0f       	add	r30, r30
  d4:	ff 1f       	adc	r31, r31
  d6:	ee 0f       	add	r30, r30
  d8:	ff 1f       	adc	r31, r31
  da:	ec 1b       	sub	r30, r28
  dc:	fd 0b       	sbc	r31, r29
  de:	eb 5f       	subi	r30, 0xFB	; 251
  e0:	fe 4f       	sbci	r31, 0xFE	; 254
  e2:	11 83       	std	Z+1, r17	; 0x01
  e4:	00 83       	st	Z, r16
  e6:	73 83       	std	Z+3, r23	; 0x03
  e8:	62 83       	std	Z+2, r22	; 0x02
  ea:	55 83       	std	Z+5, r21	; 0x05
  ec:	44 83       	std	Z+4, r20	; 0x04
  ee:	16 82       	std	Z+6, r1	; 0x06
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	1f 91       	pop	r17
  f6:	0f 91       	pop	r16
  f8:	08 95       	ret

000000fa <scheduler_delete_task>:
  fa:	27 e0       	ldi	r18, 0x07	; 7
  fc:	82 9f       	mul	r24, r18
  fe:	c0 01       	movw	r24, r0
 100:	11 24       	eor	r1, r1
 102:	fc 01       	movw	r30, r24
 104:	eb 5f       	subi	r30, 0xFB	; 251
 106:	fe 4f       	sbci	r31, 0xFE	; 254
 108:	11 82       	std	Z+1, r1	; 0x01
 10a:	10 82       	st	Z, r1
 10c:	13 82       	std	Z+3, r1	; 0x03
 10e:	12 82       	std	Z+2, r1	; 0x02
 110:	15 82       	std	Z+5, r1	; 0x05
 112:	14 82       	std	Z+4, r1	; 0x04
 114:	16 82       	std	Z+6, r1	; 0x06
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	08 95       	ret

0000011a <scheduler_dispatch_tasks>:
 11a:	ef 92       	push	r14
 11c:	ff 92       	push	r15
 11e:	1f 93       	push	r17
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	c5 e0       	ldi	r28, 0x05	; 5
 126:	d1 e0       	ldi	r29, 0x01	; 1
 128:	10 e0       	ldi	r17, 0x00	; 0
 12a:	8e 81       	ldd	r24, Y+6	; 0x06
 12c:	88 23       	and	r24, r24
 12e:	79 f0       	breq	.+30     	; 0x14e <scheduler_dispatch_tasks+0x34>
 130:	e8 81       	ld	r30, Y
 132:	f9 81       	ldd	r31, Y+1	; 0x01
 134:	30 97       	sbiw	r30, 0x00	; 0
 136:	59 f0       	breq	.+22     	; 0x14e <scheduler_dispatch_tasks+0x34>
 138:	09 95       	icall
 13a:	8e 81       	ldd	r24, Y+6	; 0x06
 13c:	81 50       	subi	r24, 0x01	; 1
 13e:	8e 83       	std	Y+6, r24	; 0x06
 140:	8c 81       	ldd	r24, Y+4	; 0x04
 142:	9d 81       	ldd	r25, Y+5	; 0x05
 144:	89 2b       	or	r24, r25
 146:	19 f4       	brne	.+6      	; 0x14e <scheduler_dispatch_tasks+0x34>
 148:	81 2f       	mov	r24, r17
 14a:	0e 94 7d 00 	call	0xfa	; 0xfa <scheduler_delete_task>
 14e:	1f 5f       	subi	r17, 0xFF	; 255
 150:	27 96       	adiw	r28, 0x07	; 7
 152:	15 30       	cpi	r17, 0x05	; 5
 154:	51 f7       	brne	.-44     	; 0x12a <scheduler_dispatch_tasks+0x10>
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	1f 91       	pop	r17
 15c:	ff 90       	pop	r15
 15e:	ef 90       	pop	r14
 160:	08 95       	ret

00000162 <scheduler_init_timer1>:
 162:	cf 93       	push	r28
 164:	c0 e0       	ldi	r28, 0x00	; 0
 166:	8c 2f       	mov	r24, r28
 168:	0e 94 7d 00 	call	0xfa	; 0xfa <scheduler_delete_task>
 16c:	cf 5f       	subi	r28, 0xFF	; 255
 16e:	c5 30       	cpi	r28, 0x05	; 5
 170:	d1 f7       	brne	.-12     	; 0x166 <scheduler_init_timer1+0x4>
 172:	81 e7       	ldi	r24, 0x71	; 113
 174:	92 e0       	ldi	r25, 0x02	; 2
 176:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 17a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 17e:	8c e0       	ldi	r24, 0x0C	; 12
 180:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 184:	82 e0       	ldi	r24, 0x02	; 2
 186:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <__vector_11>:
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	2f 93       	push	r18
 19a:	3f 93       	push	r19
 19c:	8f 93       	push	r24
 19e:	9f 93       	push	r25
 1a0:	af 93       	push	r26
 1a2:	bf 93       	push	r27
 1a4:	ef 93       	push	r30
 1a6:	ff 93       	push	r31
 1a8:	e5 e0       	ldi	r30, 0x05	; 5
 1aa:	f1 e0       	ldi	r31, 0x01	; 1
 1ac:	28 e2       	ldi	r18, 0x28	; 40
 1ae:	31 e0       	ldi	r19, 0x01	; 1
 1b0:	80 81       	ld	r24, Z
 1b2:	91 81       	ldd	r25, Z+1	; 0x01
 1b4:	89 2b       	or	r24, r25
 1b6:	91 f0       	breq	.+36     	; 0x1dc <__vector_11+0x4e>
 1b8:	82 81       	ldd	r24, Z+2	; 0x02
 1ba:	93 81       	ldd	r25, Z+3	; 0x03
 1bc:	00 97       	sbiw	r24, 0x00	; 0
 1be:	59 f4       	brne	.+22     	; 0x1d6 <__vector_11+0x48>
 1c0:	86 81       	ldd	r24, Z+6	; 0x06
 1c2:	8f 5f       	subi	r24, 0xFF	; 255
 1c4:	86 83       	std	Z+6, r24	; 0x06
 1c6:	84 81       	ldd	r24, Z+4	; 0x04
 1c8:	95 81       	ldd	r25, Z+5	; 0x05
 1ca:	00 97       	sbiw	r24, 0x00	; 0
 1cc:	39 f0       	breq	.+14     	; 0x1dc <__vector_11+0x4e>
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	93 83       	std	Z+3, r25	; 0x03
 1d2:	82 83       	std	Z+2, r24	; 0x02
 1d4:	03 c0       	rjmp	.+6      	; 0x1dc <__vector_11+0x4e>
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	93 83       	std	Z+3, r25	; 0x03
 1da:	82 83       	std	Z+2, r24	; 0x02
 1dc:	37 96       	adiw	r30, 0x07	; 7
 1de:	e2 17       	cp	r30, r18
 1e0:	f3 07       	cpc	r31, r19
 1e2:	31 f7       	brne	.-52     	; 0x1b0 <__vector_11+0x22>
 1e4:	ff 91       	pop	r31
 1e6:	ef 91       	pop	r30
 1e8:	bf 91       	pop	r27
 1ea:	af 91       	pop	r26
 1ec:	9f 91       	pop	r25
 1ee:	8f 91       	pop	r24
 1f0:	3f 91       	pop	r19
 1f2:	2f 91       	pop	r18
 1f4:	0f 90       	pop	r0
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	0f 90       	pop	r0
 1fa:	1f 90       	pop	r1
 1fc:	18 95       	reti

000001fe <init_ports>:
 1fe:	84 b1       	in	r24, 0x04	; 4
 200:	88 63       	ori	r24, 0x38	; 56
 202:	84 b9       	out	0x04, r24	; 4
 204:	20 9a       	sbi	0x04, 0	; 4
 206:	21 98       	cbi	0x04, 1	; 4
 208:	87 b1       	in	r24, 0x07	; 7
 20a:	80 7e       	andi	r24, 0xE0	; 224
 20c:	87 b9       	out	0x07, r24	; 7
 20e:	08 95       	ret

00000210 <init_uart>:
 210:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 214:	83 e3       	ldi	r24, 0x33	; 51
 216:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 21a:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 21e:	88 e1       	ldi	r24, 0x18	; 24
 220:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 224:	86 e0       	ldi	r24, 0x06	; 6
 226:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 22a:	08 95       	ret

0000022c <init_adc>:
 22c:	80 e6       	ldi	r24, 0x60	; 96
 22e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 232:	87 e8       	ldi	r24, 0x87	; 135
 234:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 238:	08 95       	ret

0000023a <transmit>:
 23a:	e0 ec       	ldi	r30, 0xC0	; 192
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	90 81       	ld	r25, Z
 240:	95 ff       	sbrs	r25, 5
 242:	fd cf       	rjmp	.-6      	; 0x23e <transmit+0x4>
 244:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 248:	08 95       	ret

0000024a <transmit_sensor_values>:
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	c0 e0       	ldi	r28, 0x00	; 0
 254:	d1 e0       	ldi	r29, 0x01	; 1
 256:	05 e0       	ldi	r16, 0x05	; 5
 258:	11 e0       	ldi	r17, 0x01	; 1
 25a:	89 91       	ld	r24, Y+
 25c:	0e 94 1d 01 	call	0x23a	; 0x23a <transmit>
 260:	c0 17       	cp	r28, r16
 262:	d1 07       	cpc	r29, r17
 264:	d1 f7       	brne	.-12     	; 0x25a <transmit_sensor_values+0x10>
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	08 95       	ret

00000270 <get_adc_value>:

//sensor functies
uint8_t get_adc_value()
{
	ADCSRA |= (1<<ADSC); // start conversion
 270:	ea e7       	ldi	r30, 0x7A	; 122
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	80 64       	ori	r24, 0x40	; 64
 278:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
 27a:	80 81       	ld	r24, Z
 27c:	86 fd       	sbrc	r24, 6
 27e:	fd cf       	rjmp	.-6      	; 0x27a <get_adc_value+0xa>
	return ADCH; // 8-bit resolution, left adjusted
 280:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 284:	08 95       	ret

00000286 <read_sensor0>:

void read_sensor0(void)
{
    // zet channel van adc op PC0
    ADMUX &= 11110000;
 286:	ec e7       	ldi	r30, 0x7C	; 124
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	80 77       	andi	r24, 0x70	; 112
 28e:	80 83       	st	Z, r24
    // slaat adc value op in sensor_values array 
    sensor_values[0] = get_adc_value();
 290:	0e 94 38 01 	call	0x270	; 0x270 <get_adc_value>
 294:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 298:	08 95       	ret

0000029a <main>:
    }
}

int main()
{
	init_ports();
 29a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <init_ports>
    init_uart();
 29e:	0e 94 08 01 	call	0x210	; 0x210 <init_uart>
    init_adc();
 2a2:	0e 94 16 01 	call	0x22c	; 0x22c <init_adc>
	scheduler_init_timer1(); // init de timer en verwijder alle taken
 2a6:	0e 94 b1 00 	call	0x162	; 0x162 <scheduler_init_timer1>
	scheduler_add_task(read_sensor0,0,100);
 2aa:	44 e6       	ldi	r20, 0x64	; 100
 2ac:	50 e0       	ldi	r21, 0x00	; 0
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	83 e4       	ldi	r24, 0x43	; 67
 2b4:	91 e0       	ldi	r25, 0x01	; 1
 2b6:	0e 94 48 00 	call	0x90	; 0x90 <scheduler_add_task>
    scheduler_add_task(transmit_sensor_values,0,500);
 2ba:	44 ef       	ldi	r20, 0xF4	; 244
 2bc:	51 e0       	ldi	r21, 0x01	; 1
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	70 e0       	ldi	r23, 0x00	; 0
 2c2:	85 e2       	ldi	r24, 0x25	; 37
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	0e 94 48 00 	call	0x90	; 0x90 <scheduler_add_task>
 
-*------------------------------------------------------------------*/

void scheduler_start(void)
{
      sei();
 2ca:	78 94       	sei
	scheduler_init_timer1(); // init de timer en verwijder alle taken
	scheduler_add_task(read_sensor0,0,100);
    scheduler_add_task(transmit_sensor_values,0,500);
	scheduler_start(); // start de scheduler
	while (1) {
		scheduler_dispatch_tasks();
 2cc:	0e 94 8d 00 	call	0x11a	; 0x11a <scheduler_dispatch_tasks>
 2d0:	fd cf       	rjmp	.-6      	; 0x2cc <main+0x32>

000002d2 <_exit>:
 2d2:	f8 94       	cli

000002d4 <__stop_program>:
 2d4:	ff cf       	rjmp	.-2      	; 0x2d4 <__stop_program>
